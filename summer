[9:34 pm, 20/8/2024] Siva: import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import numpy as np
import cv2

# Load your dataset
def load_images_from_folder(folder):
    images = []
    for filename in os.listdir(folder):
        img = cv2.imread(os.path.join(folder, filename))
        if img is not None:
            images.append(img)
    return images

# Example: Load images
train_images = load_images_from_folder('path_to_training_images')
train_labels = load_images_from_folder('path_to_training_labels')  # Binary masks for lanes

# Preprocess images
train_images = np.array([cv2.resize(img, (128, 128)) for img in train_images])
train_labels = np.array([cv2.resize(img, (128, 128)) for img in train_labels])

train_images = train_images / 255.0
train_labels = train_labels / 255.0

# Expand dimensions to match the model input
train_images = np.expand_dims(train_images, axis=-1)
train_labels = np.expand_dims(train_labels, axis=-1)
[9:34 pm, 20/8/2024] Siva: from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, UpSampling2D

model = Sequential([
    Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(128, 128, 1)),
    MaxPooling2D((2, 2)),
    Conv2D(64, (3, 3), activation='relu', padding='same'),
    MaxPooling2D((2, 2)),
    Conv2D(128, (3, 3), activation='relu', padding='same'),
    UpSampling2D((2, 2)),
    Conv2D(64, (3, 3), activation='relu', padding='same'),
    UpSampling2D((2, 2)),
    Conv2D(1, (3, 3), activation='sigmoid', padding='same')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.summary()
[9:34 pm, 20/8/2024] Siva: history = model.fit(train_images, train_labels, epochs=10, batch_size=32, validation_split=0.2)
[9:34 pm, 20/8/2024] Siva: import matplotlib.pyplot as plt

# Evaluate on validation set
val_loss, val_accuracy = model.evaluate(val_images, val_labels)
print(f'Validation Loss: {val_loss}, Validation Accuracy: {val_accuracy}')

# Plot training history
plt.plot(history.history['loss'], label='loss')
plt.plot(history.history['val_loss'], label='val_loss')
plt.legend()
plt.show()

# Make predictions
predictions = model.predict(val_images)

# Display some predictions
for i in range(5):
    plt.subplot(1, 2, 1)
    plt.imshow(val_images[i].squeeze(), cmap='gray')
    plt.subplot(1, 2, 2)
    plt.imshow(predictions[i].squeeze(), cmap='gray')
    plt.show()
